---
title: "Spatiall joining Scottish CoM Areas to Output Areas"
author: "Dave"
format: html
editor: visual
---

## Housekeeping

### Libraries

```{r libs}
#| message: false
library(fs)
library(sf)
library(here)
library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(carutools)
library(ggspatial)
library(scales)
library(vroom)
```

### Read in Data

Read in CoM shapefiles:

```{r readShapefiles}
coms <- dir_ls(here("geospatial-data", "com-areas"))
names(coms) <- str_extract(coms, "(?<=/)[^/]+$")
coms <- as.list(coms)

coms <- map(coms, read_sf)

coms[[1]]
```

Then we'll also read in the Scottish data zones:

```{r readInScottishdz}
dz <- read_sf(here("geospatial-data", "civic-areas",
                   "2011_dz-boundaries_scotland"))

```

## Format data

We'll unionise the com shapes:

```{r unioniseComShapes}
## Reproject (see equivalent doc for E/W for better explanation)
coms <- map(coms, \(x) st_transform(x, st_crs(coms[[1]])))

## Unionisise and simplify
coms_simplified <- map(coms, st_union)
coms_simplified <- map(coms, st_make_valid)

coms_union <- reduce(coms_simplified, st_union)
```

### Map all com areas

```{r mapAllComAreas}
ggplot(coms_union) + 
  geom_sf(fill = ca_cyan()) +
  theme_minimal() +
  annotation_scale()
```

Great!

### Filter output areas

We only need output areas that intersect the unionised CoM shapes

```{r filterdz}
intersections <- st_intersects(dz, coms_union, sparse = FALSE)[, 1]
table(intersections)

dz <- filter(dz, intersections)
nrow(dz)

rm(coms_union, intersections)
```

### Tidy up output areas

```{r tidyOutputAreas}
dz <- select(dz, dz_2011_code = DataZone)
head(dz)
```

## Calculate overlaps

```{r calculateOverlaps}
intersecting_dz <- 
  map(
    coms_simplified,
    \(x){
      intersection <- st_intersects(dz, x, sparse = FALSE)[, 1]
      
      filter(dz, intersection)
      })

head(intersecting_dz[[1]])

intersecting_dz <- map(intersecting_dz, mutate,
                       dz_area = st_area(geometry))

suppressWarnings({
  overlap <- map2(intersecting_dz, coms_simplified, st_intersection)
})

overlap <- map(overlap, mutate,
               overlapping_area = st_area(geometry))

overlap[[1]] |> 
  filter(round(overlapping_area,1) < round(dz_area,1)) |> 
  select(dz_2011_code, dz_area, overlapping_area) |> 
  arrange(overlapping_area - dz_area) |> 
  head()

overlap <- map(overlap, mutate,
               ratio_dz_intersection_com = 
                 round(overlapping_area / dz_area, 7))

quantile(overlap[[1]][["ratio_dz_intersection_com"]])
```

Looks like over 75% of dz fit entirely inside CoM areas, which makes sense as each comprises about 20 households.

### Visualise

Let's check it's what we want

```{r visualise}
names(overlap)[[1]]

a7_dz_codes <- overlap[["a7"]][["dz_2011_code"]]
a7_dz <- filter(dz, dz_2011_code %in% a7_dz_codes)

ggplot(a7_dz) + 
  geom_sf(fill = ca_cyan(), alpha = 0.2) + 
  geom_sf(data = overlap[["a7"]],
          fill = ca_green(), alpha = 0.6, colour = ca_orange()) +
  theme_minimal()
```

Nice!

## Export overlap

```{r exportOverlap}
overlap_stats <- map(overlap, as_tibble)

overlap_stats <- map(overlap_stats, select,
                     dz_2011_code, ratio_dz_intersection_com)

dir_create(here("overlaps_com-dz"))

iwalk(overlap_stats,
      \(x, y){
        vroom_write(
          x, 
          file = here("overlaps_com-dz", str_c(y, ".csv")),
          delim = ","
          )
      })
```
